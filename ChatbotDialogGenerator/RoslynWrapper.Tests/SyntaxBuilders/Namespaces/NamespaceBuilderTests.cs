namespace RoslynWrapper.Tests.SyntaxBuilders.Namespaces
{
    using System.Linq;
    using FluentAssertions;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using RoslynWrapper.SyntaxBuilders.Namespaces;
    using RoslynWrapper.Tests.Utils;
    using Xunit;

    public class NamespaceBuilderTests
    {
        [Fact]
        public void Can_Set_Namespace_Name()
        {
            // arrange
            const string namespaceName = "TestNamespace";

            // act
            var namespaceDeclaration = new NamespaceBuilder(namespaceName: namespaceName)
                .Build();

            // assert
            var validator = new NamespaceBuilderValidator();

            validator.VerifyNamespaceWasCreated(namespaceDeclaration);
            validator.VerifyNamespaceName(namespaceDeclaration.Name, expectedName: namespaceName);
        }

       [Fact]
        public void Can_Set_Namespace_Usings()
        {
            // arrange
            var usings = new[] { "RoslynWrapper.SyntaxBuilders.CompilationUnits", "System.Collections.Generic"};

            // act
            var namespaceDeclaration = new NamespaceBuilder(namespaceName: "TestNamespace")
                .WithUsings(usings)
                .Build();

            // assert
            var validator = new NamespaceBuilderValidator();

            validator.VerifyNamespaceWasCreated(namespaceDeclaration);
            validator.VerifyNamespaceUsings(namespaceDeclaration.Usings, expectedUsings: usings);
        }

        [Fact]
        public void Can_Order_Usings()
        {
            // arrange
            var unorderedUsings = new[] { "RoslynWrapper.SyntaxBuilders.CompilationUnits", "Collections.Generic" };
            var orderedUsings = new[] { "Collections.Generic", "RoslynWrapper.SyntaxBuilders.CompilationUnits" };

            // act
            var namespaceDeclaration = new NamespaceBuilder(namespaceName: "TestNamespace")
                .WithUsings(unorderedUsings)
                .Build();

            // assert
            var validator = new NamespaceBuilderValidator();

            validator.VerifyNamespaceWasCreated(namespaceDeclaration);
            validator.VerifyNamespaceUsings(namespaceDeclaration.Usings, expectedUsings: orderedUsings);
        }

        [Fact]
        public void Can_Set_Namespace_Classes()
        {
            // arrange
            const string firstClass = "FirstClass";
            const string secondClass = "SecondClass";

            var firstClassDeclaration = $@"class {firstClass} {{}}"
                .ExtractDeclarationSyntaxFromString<ClassDeclarationSyntax>();

            var secondClassDeclaration = $@"class {secondClass} {{}}"
                .ExtractDeclarationSyntaxFromString<ClassDeclarationSyntax>();

            // act
            var namespaceDeclaration = new NamespaceBuilder(namespaceName: "TestNamespace")
                .WithClasses(
                    firstClassDeclaration,
                    secondClassDeclaration)
                .Build();

            // assert
            var validator = new NamespaceBuilderValidator();

            validator.VerifyNamespaceWasCreated(namespaceDeclaration);

            var namespaceClasses = namespaceDeclaration.Members.OfType<ClassDeclarationSyntax>().ToList();
            validator.VerifyClasses(namespaceClasses, new[] { firstClass, secondClass });
        }

        [Fact]
        public void Can_Add_AutoGeneratedCodeDisclaimer()
        {
            // arrange
            const string namespaceName = "TestNamespace";

            // act
            var namespaceDeclaration = new NamespaceBuilder(namespaceName: namespaceName)
                .Build()
                .NormalizeWhitespace().ToFullString();

            // assert
            var expectedNamespace = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------
namespace TestNamespace
{
}";

            namespaceDeclaration.Should().Be(expectedNamespace);
        }
    }
}
namespace RoslynWrapper.SyntaxBuilders.Namespaces
{
    using System.Linq;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    public class NamespaceBuilder
    {
        private readonly string _name;
        private SyntaxToken _autogeneratedCodeDisclaimer;
        private ClassDeclarationSyntax[] _classDeclarations;
        private InterfaceDeclarationSyntax[] _interfaceDeclaration;
        private UsingDirectiveSyntax[] _usings;

        public NamespaceBuilder(string namespaceName)
        {
            this._name = namespaceName;

            this.AddAutogeneratedCodeDisclaimer();
        }

        private void AddAutogeneratedCodeDisclaimer()
        {
            var template = Resources.AutogeneratedCodeDisclaimerTemplate;

            this._autogeneratedCodeDisclaimer = SyntaxFactory.Token(
                SyntaxFactory.TriviaList(new[] { SyntaxFactory.Comment(template) }),
                SyntaxKind.NamespaceKeyword,
                SyntaxFactory.TriviaList());
        }

        public NamespaceBuilder WithUsings(params string[] namespaces)
        {
            this._usings = namespaces
                .OrderBy(@using => @using, new NamespaceComparer())
                .Select(@using => SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName(@using)))
                .ToArray();

            return this;
        }

        public NamespaceBuilder WithClasses(params ClassDeclarationSyntax[] classDeclarations)
        {
            this._classDeclarations = classDeclarations;

            return this;
        }

        public NamespaceBuilder WithInterfaces(params InterfaceDeclarationSyntax[] interfaces)
        {
            this._interfaceDeclaration = interfaces;

            return this;
        }

        public NamespaceDeclarationSyntax Build()
        {
            var declaration = NamespaceDeclarationSyntaxExtensions
                .NamespaceDeclaration(this._name)
                .WithNamespaceKeyword(this._autogeneratedCodeDisclaimer);

            if (this._usings != null && this._usings.Length > 0)
            {
                declaration = declaration.AddUsings(this._usings);
            }

            if (this._classDeclarations != null && this._classDeclarations.Length > 0)
            {
                declaration = declaration.AddMembers(this._classDeclarations);
            }

            if (this._interfaceDeclaration != null && this._interfaceDeclaration.Length > 0)
            {
                declaration = declaration.AddMembers(this._interfaceDeclaration);
            }

            return declaration;
        }
    }
}